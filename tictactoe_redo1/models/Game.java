package tictactoe_redo1.models;



import tictactoe_redo1.exceptions.DuplicateSymbolException;
import tictactoe_redo1.exceptions.MoreThanOneBotException;
import tictactoe_redo1.exceptions.PlayersAndDimensionsMismatchException;
import tictactoe_redo1.strategies.winningStrategy.WinningStrategy;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

public class  Game {
    private Board board;
    private List<Player> players;
    private List<Move> moves;
    private Player winner;
    private GameState gameState;
    private int nextPlayerMoveIndex;
    private List<WinningStrategy> winningStrategies;


//    Game class constructor  should be private - Builder dp as we should not
//directly be able to modify the Game
    private Game(int size, List<Player> players, List<WinningStrategy> winningStrategies){
        this.board = new Board(size);
        this.players = players;
        this.moves = new ArrayList<>();
        this.gameState = GameState.IN_PROGRESS;
        this.nextPlayerMoveIndex = 0;
        this.winningStrategies = winningStrategies;

    }


    public static GameBuilder builder(){
        return new GameBuilder();
    }

    public Board getBoard() {
        return board;
    }
    public List<Player> getPlayers() {
        return players;
    }
    public List<Move> getMoves() {
        return moves;
    }
    public Player getWinner() {
        return winner;
    }
    public GameState getGameState() {
        return gameState;
    }
    public int getNextPlayerMoveIndex() {
        return nextPlayerMoveIndex;
    }
    public List<WinningStrategy> getWinningStrategies() {
        return winningStrategies;
    }

    public void display(){
        board.display();
    }

    public void makeMove(){
        Player currentPlayer = this.players.get(nextPlayerMoveIndex);
        System.out.println(String.format("It's %s's turn, Please Make a Move.",currentPlayer.getName()));
        Move move = currentPlayer.makeMove(board);
        System.out.println(String.format("%s has made a move at row: %s and column: %s",currentPlayer.getName(),move.getCell().getRow(),move.getCell().getCol()));

//        UPDATE MOVE TO THE BOARD
        if(!isValidMove(move)){
            System.out.println("Invalid Move! Please try again...");
            return;
        }

        int row = move.getCell().getRow();
        int col = move.getCell().getCol();
        Cell cellToChange = board.getGrid().get(row).get(col);
        cellToChange.setCellState(CellStatus.FILLED);
        cellToChange.setPlayer(move.getPlayer());

//        Put the move to moves list
        Move finalMove = new Move(currentPlayer,cellToChange);
        moves.add(finalMove);

//        update the next player //
        nextPlayerMoveIndex = (nextPlayerMoveIndex + 1)%players.size();

//        check if cur person is winner

        if(checkWinner(board,finalMove)){
            gameState = GameState.WIN;
            winner = currentPlayer;
        }else if(moves.size()==this.board.getSize()*this.board.getSize()){
            gameState = GameState.DRAW;
        }
    }

    private boolean checkWinner(Board board, Move finalMove) {
        for(WinningStrategy winningStrategy: winningStrategies){
            if(winningStrategy.checkWinner(board,finalMove)){
                return true;
            }
        }
        return false;
    }

    private boolean isValidMove(Move move) {
        int row = move.getCell().getRow();
        int col = move.getCell().getCol();

        if(row>=board.getSize()){
            return false;
        }

        if(col>=board.getSize()){
            return false;
        }

        if(board.getGrid().get(row).get(col).getCellState()!=CellStatus.EMPTY){
            return false;
        }
        return true;
    }

    public Optional<Move> undo() {
        if(moves.isEmpty()){
            System.out.println("No moves to undo!!");
            return Optional.empty();
        }

        Move lastMove = moves.get(moves.size()-1);
        moves.remove(lastMove);//remove from list

        lastMove.getCell().reset();// reset the cell
        nextPlayerMoveIndex = (nextPlayerMoveIndex - 1 + players.size())%players.size();// revert to the players turn

//        undo the winning strategy move also
        for(WinningStrategy winningStrategy: winningStrategies){
            winningStrategy.handleUndo(board,lastMove);
        }
        return Optional.of(lastMove);

    }

    public static class GameBuilder{
//        private Board board;
//        replacement for board is size
        private int size;

//        We have commented the above var which we copied
//        as these are not coming from client but are generated by the gameonly

//        private List<Move> moves;
//        private Player winner;
//        private GameState gameState;
//        private int nextPlayerMoveIndex;
        private List<Player> players;
        private List<WinningStrategy> winningStrategies;


//        To avoid null ptr exception
        public GameBuilder(){
            this.size = 0;
            this.players = new ArrayList<>();
            this.winningStrategies = new ArrayList<>();
        }
        public GameBuilder setSizeOfBoard(int size) {
            this.size = size;
            return this;
        }

        public GameBuilder setPlayers(List<Player> players) {
            this.players = players;
            return this;
        }

        public GameBuilder setWinningStrategies(List<WinningStrategy> winningStrategies) {
            this.winningStrategies = winningStrategies;
            return this;
        }

        //    //        For multivalued attributes //Additional INFO
//    public tictactoe.models.Game.GameBuilder addPlayer(tictactoe.models.Player player){
//        this.players.add(player);
//        return this;
//    }
//
//
//    public tictactoe.models.Game.GameBuilder addWinningStrategies(tictactoe.strategies.winningstrategies.WinningStrategy winningStrategy){
//        this.winningStrategies.add(winningStrategy);
//        return this;
//    }


        public Game build() throws MoreThanOneBotException, DuplicateSymbolException, PlayersAndDimensionsMismatchException {
            validateSymbols();
            validatePlayerAndDimension();
            validateBot();
            return new Game(this.size,this.players,this.winningStrategies);
        }

        private void validateSymbols() throws DuplicateSymbolException {
            long count = this.players.stream()
                    .map(Player::getSymbol)
                    .map(Symbol::getCharacter)
                    .distinct()
                    .count();

            if(players.size()!=count){
                throw new DuplicateSymbolException("Duplicate Symbols found for Players");
            }

        }

        private void validateBot() throws MoreThanOneBotException {
            long count = this.players.stream()
                    .filter(player -> player.getPlayerType()==PlayerType.BOT)
                    .count();
            if(count>1){
                throw new MoreThanOneBotException(String.format("Found %s Bots.",count));
            }
        }

        private void validatePlayerAndDimension() throws PlayersAndDimensionsMismatchException {
            if(this.players.size()!=this.size-1){
                throw new PlayersAndDimensionsMismatchException("Enter Valid No of players!!");
            }
        }
    }
}